from string_utils import StringUtils
import pytest

#–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ capitilize:
@pytest.mark.parametrize('text, result', [
    ('skypro', 'Skypro'), #–°—Ç—Ä–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ
    ("it's a beautiful lie", "It's a beautiful lie"), #–°—Ç—Ä–æ–∫–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
    ('in the end     ', 'In the end     '), #–°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ
    (('–í–ï–†–•–ù–ò–ô –†–ï–ì–ò–°–¢–†', '–í–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä')), #–í—Å–µ –±—É–∫–≤—ã –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    ('1234567', '1234567'), #–ß–∏—Å–ª–∞
    ('@#$%^&*():!‚Ññ;', '@#$%^&*():!‚Ññ;'), #—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    ('', ''), #–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    ('     hi there', '     hi there'), #–°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ
    ('üå∏üòä‚ù§Ô∏èüçïüé∂', 'üå∏üòä‚ù§Ô∏èüçïüé∂'), #–≠–º–æ–¥–∑–∏

    ])
def test_positive_capitilize(text, result):
    stringutils = StringUtils()
    res = stringutils.capitilize(text)
    assert res == result

#–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ capitilize:
@pytest.mark.xfail()
@pytest.mark.parametrize('text, result', [
    (None, None), #None, AttributeError
    (123456, None), #integer, AttributeError
    (['anna kotikova'], None) #list, AttributeError
    ])
def test_negative_capitilize(text, result):
    stringutils = StringUtils()
    res = stringutils.capitilize(text)
    assert res == result  

#–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ trim
@pytest.mark.parametrize('text, result', [
    (' 12345%dkffkab', '12345%dkffkab'), #1 –ø—Ä–æ–±–µ–ª –≤ –Ω–∞—á–∞–ª–µ
    ('          111kfsslf99', '111kfsslf99'), #–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ
    (' fsdfj sfdkj asdfk', 'fsdfj sfdkj asdfk'), #–°—Ç—Ä–æ–∫–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
    ('     ', ''), #–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–±–µ–ª(—ã)
    (' üåàüéâüê±‚Äçüèç', 'üåàüéâüê±‚Äçüèç'), #—ç–º–æ–¥–∑–∏
    ('', ''), #–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    ('akjfb2      ', 'akjfb2      '), #–ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ
    ])
def test_positive_trim(text, result):
    stringutils = StringUtils()
    res = stringutils.trim(text)
    assert res == result

#–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ trim
@pytest.mark.xfail()
@pytest.mark.parametrize('text, result', [
    (None, None), #None AttributeError
    (1363, None), #integer AttributeError
    (['    –ü—Ä–∏–≤–µ—Ç'], None) #list AttributeError
    ])
def test_negative_trim(text, result):
    stringutils = StringUtils()
    res = stringutils.trim(text)
    assert res == result

#–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ to_list
@pytest.mark.parametrize('text, delimeter, result', [
    ('123,456,789,', ',', ['123', '456', '789', '']), #—Å—Ç—Ä–æ–∫–∞ –∏–∑ —á–∏—Å–µ–ª
    ('sdf*sa*as*sFDdfd', '*', ['sdf', 'sa', 'as', 'sFDdfd']), #—Å—Ç—Ä–æ–∫–∞ –∏–∑ –±—É–∫–≤
    ('123—Ñ567—Ñ124—Ñsdfg', '—Ñ', ['123', '567', '124', 'sdfg']), #–µ—â–µ –æ–¥–∏–Ω –≤–∏–¥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    ('—Ç—ã—Ü\n—Ç—ã—Ü\n—Ç—ã—Ü\n–ø–∞–º\n–ø–∞—Ä–∞–º', '\n', ['—Ç—ã—Ü', '—Ç—ã—Ü', '—Ç—ã—Ü', '–ø–∞–º', '–ø–∞—Ä–∞–º']), #—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        ('waeufvb;a asdfdf', '123', ['waeufvb;a asdfdf']), #—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç
    ])
def test_positive_to_list(text, delimeter, result):
    stringutils = StringUtils()
    res = stringutils.to_list(text, delimeter)
    assert res == result

@pytest.mark.parametrize('text, result', [('esab,asf8,3777,()*737', ['esab', 'asf8', '3777', '()*737'])]) #–Ω–µ —É–∫–∞–∑–∞–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
def test_positive1_to_list(text, result):
    stringutils = StringUtils()
    res = stringutils.to_list(text)
    assert res == result

#–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ to_list
@pytest.mark.xfail()
@pytest.mark.parametrize('text, delimeter, result', [
    (None, ',', None), #None
    (['anna', 'inna', 'tolya'], ',', None), #list AttributeError
    ])
def test_negative_to_list(text, delimeter, result):
    stringutils = StringUtils()
    res = stringutils.to_list(text, delimeter)
    assert res == result

#–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ contains
@pytest.mark.parametrize('text, symbol, result', [
    ('dsf sf5ncwe', '5', True), #–µ—Å—Ç—å 1 —Ä–∞–∑
    ('sfbksfin', 's', True), #–µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    ('–∞—ã–º–∏–ª–¥', '–º–∏–ª', True), #–Ω–µ 1 —Å–∏–º–≤–æ–ª, –∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ
    ('sfb‚Ññksfin', '‚Ññ', True), #—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–º–≤–æ–ª–∞
    ('kugjk', '', True), #–Ω–µ —É–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    ('', '', True), #–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    ])
def test_positive_contains(text, symbol, result):
    stringutils = StringUtils()
    res = stringutils.contains(text, symbol)
    assert res == result

#–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ contains
@pytest.mark.xfail()
@pytest.mark.parametrize('text, symbol, result', [
    (None, '', None), #None AttributeError
    ])
def test_negative_contains(text, symbol, result):
    stringutils = StringUtils()
    res = stringutils.contains(text, symbol)
    assert res == result

#–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ delete_symbol
@pytest.mark.parametrize('text, symbol, result', [
    ('wsadjkc4sfdzzzz', '4', 'wsadjkcsfdzzzz'), #—É–¥–∞–ª–µ–Ω–∏–µ 1 —Å–∏–º–≤–æ–ª–∞
    ('wsazzdjkcz4sfdzzzz', 'z', 'wsadjkc4sfd'), #—É–¥–∞–ª–µ–Ω–∏–µ 1 —Å–∏–º–≤–æ–ª–∞, –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    ('—ã–≤–∞–∏ –ª–∞—ã–∞—Å–ª—Ä—Ñ —Ñ–ª–≤—ã–≤', '–≤–∞–∏', '—ã –ª–∞—ã–∞—Å–ª—Ä—Ñ —Ñ–ª–≤—ã–≤'), #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    ('sdflkslbca; as asfjnsl', '^', 'sdflkslbca; as asfjnsl'), #—É–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç
    ('', 'f', ''), #–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ —Å–∏–º–≤–æ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    ('—ã—Ñ–≤–ª–º—è—Ç–ª  —ã–∞ —Å', '', '—ã—Ñ–≤–ª–º—è—Ç–ª  —ã–∞ —Å'), #–Ω–∏—á–µ–≥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    ('Skypro', 's', 'Skypro') #—Ä–µ–≥–∏—Å—Ç—Ä–æ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    ])
def test_positive_delete_symbol(text, symbol, result):
    stringutils = StringUtils()
    res = stringutils.delete_symbol(text, symbol)
    assert res == result

#–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ delete_symbol
@pytest.mark.xfail()
@pytest.mark.parametrize('text, symbol, result', [('64wefh5ed', 5, None)])#TypeError
def test_negative_delete_symbol(text, symbol, result):
    stringutils = StringUtils()
    res = stringutils.delete_symbol(text, symbol)
    assert res == result

#–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ starts_with
@pytest.mark.parametrize('text, symbol, result', [
    ('sdficbwv a sfn jzsd i', 's', True),  #1 —Å–∏–º–≤–æ–ª
    ('43587vhsdjbv&^', '435', True), #–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
    ('—É–∞—Å—è–¥–≥ —Ç–æ—ã–∞', 'dvjj', False), #–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç—Ç–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    ('—É–∞—Å—è–¥–≥ —Ç–æ—ã–∞', '—Ç–æ—ã–∞', False), #–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
    ('—ã–≤–ø–º–ª–æ –≤', '', True) #–ø—É—Å—Ç–æ—Ç–∞ –≤–º–µ—Å—Ç–æ —Å–∏–º–≤–æ–ª–∞
    ])
def test_positive_starts_with(text, symbol, result):
    stringutils = StringUtils()
    res = stringutils.starts_with(text, symbol)
    assert res == result

#–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ starts_with
@pytest.mark.xfail()
@pytest.mark.parametrize('text, symbol, result', [('64wefh5ed', 5, None)]) #integer TypeError
def test_negative_starts_with(text, symbol, result):
    stringutils = StringUtils()
    res = stringutils.starts_with(text, symbol)
    assert res == result

#–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ end_with
@pytest.mark.parametrize('text, symbol, result', [
    ('sdficbwv a sfn jzsd i', 'i', True),  #1 —Å–∏–º–≤–æ–ª
    ('43587vhsdjbv&^', 'v&^', True), #–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
    ('—É–∞—Å—è–¥–≥ —Ç–æ—ã–∞', 'dvjj', False), #–Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–∏ —Å–∏–º–≤–æ–ª—ã
    ('—É–∞—Å—è–¥–≥ —Ç–æ—ã–∞', '—É–∞—Å—è', False), #–Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
    ('—ã–≤–ø–º–ª–æ –≤', '', True) #–ø—É—Å—Ç–æ—Ç–∞ –≤–º–µ—Å—Ç–æ —Å–∏–º–≤–æ–ª–∞
    ])
def test_positive_end_with(text, symbol, result):
    stringutils = StringUtils()
    res = stringutils.end_with(text, symbol)
    assert res == result

#–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ end_with
@pytest.mark.xfail()
@pytest.mark.parametrize('text, symbol, result', [('64wefh5ed', 5, None)]) #integer TypeError
def test_negative_end_with(text, symbol, result):
    stringutils = StringUtils()
    res = stringutils.end_with(text, symbol)
    assert res == result

#–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ is_empty
@pytest.mark.parametrize('text, result', [
    ('', True), #–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    ('     ', True), #—Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
    ('—Ö–∑—Ñ–ª—ã—Å—Ç—Ç3', False), #–Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    ('¬†', True) #–Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª
    ])
def test_positive_is_empty(text, result):
    stringutils = StringUtils()
    res = stringutils.is_empty(text)
    assert res == result

#–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ is_empty
@pytest.mark.xfail()
@pytest.mark.parametrize('text, result', [
    (7575, None), #integer
    ([], None), #–ø—É—Å—Ç–æ–π list
    (None, None) #None
    ])
def test_negative_is_empty(text, result):
    stringutils = StringUtils()
    res = stringutils.is_empty(text)
    assert res == result

#–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã –¥–ª—è list_to_string
@pytest.mark.parametrize('text, result', [
    (['cat', 'dog', 'horse'], 'cat, dog, horse'), #—Å–ø–∏—Å–æ–∫ –∏–∑ string
    ([1, 3, 56, 987], '1, 3, 56, 987'), #—Å–ø–∏—Å–æ–∫ –∏–∑ integer
    (['sf', 'shd', 435], 'sf, shd, 435'), #—Å–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    ([], ''), #–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    ([[1, 3], [56, 987]], '[1, 3], [56, 987]'), #–º–∞—Ç—Ä–∏—Ü–∞
    ('sdgdgvrr', 's, d, g, d, g, v, r, r') #—Å—Ç—Ä–æ–∫–∞
    ])
def test_positive_list_to_string(text, result):
    stringutils = StringUtils()
    res = stringutils.list_to_string(text)
    assert res == result

@pytest.mark.parametrize('text, joiner, result', [([7, 952, 991, '01', '01'], '-', '7-952-991-01-01')])
def test_positive1_list_to_string(text, joiner, result):
    stringutils = StringUtils()
    res = stringutils.list_to_string(text, joiner)
    assert res == result
